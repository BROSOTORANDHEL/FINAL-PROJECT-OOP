/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package sari.saristore;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import store.MyConnection;

/**
 *
 * @author Marc Loyd
 */
public class Home extends javax.swing.JFrame {
    
    private int finalTotalPrice = 0;
    
    private int productPk = 0;

    /**
     * Creates new form Home
     */
    public Home() {
        initComponents();
    }
    
    private void clearProduct() {
        txtName.setText("");
        txtQuanti.setText("");
        txtPrice.setText("");
        txtCategory.setText("");
    }
    
    public void searchLowStock() {
        int minStockThreshold = 5; // Set the threshold for low stock
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel(); // Assuming jInventory is your JTable for displaying low stock

        // Clear previous data from the table
        model.setRowCount(0);
        
        try {
            // Connect to the database
            Connection con = store.MyConnection.getConnection(); // Assuming MyConnection is your DB connection helper
            String query = "SELECT Name, quantity, price, category FROM Inventory WHERE quantity < ?"; // Include category and price in the query
            PreparedStatement pst = con.prepareStatement(query);
            pst.setInt(1, minStockThreshold);
            ResultSet rs = pst.executeQuery();

            // Check if there are any low-stock products
            boolean foundLowStock = false;
            
            while (rs.next()) {
                String productName = rs.getString("Name");   // Get product name
                int currentStock = rs.getInt("quantity");    // Get stock quantity
                double price = rs.getInt("price");  // Get category
                String category = rs.getString("category");        // Get price

                // Add the low-stock product with category and price to the table model
                model.addRow(new Object[]{productName, currentStock, price, category}); // Ensure correct order: Name, Quantity, Category, Price

                foundLowStock = true;
            }

            // If no low-stock products are found
            if (!foundLowStock) {
                JOptionPane.showMessageDialog(null, "No products with low stock found.");
            }
            
        } catch (Exception e) {
            // Handle any database connection or query issues
            JOptionPane.showMessageDialog(null, "Error searching for low stock: " + e.getMessage());
        }
    }
    
    private void calculateBalance() {
        try {
            int payAmount = Integer.parseInt(TXTPAY.getText());
            
            int balance = payAmount - finalTotalPrice;
            if (balance < 0) {
                JOptionPane.showMessageDialog(null, "Insufficient payment! You need ₱ " + Math.abs(balance) + "more.");
            } else {
                txtChange.setText("₱" + balance);
                finalTotalPrice = 0;
                txtTUTAL.setText("");
                TXTPAY.setText("");
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Invalid payment amount! Please enter a valid number.");
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        txtName = new javax.swing.JTextField();
        txtCategory = new javax.swing.JTextField();
        txtPrice = new javax.swing.JTextField();
        txtQuanti = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tCart = new javax.swing.JTable();
        btnBuy = new javax.swing.JButton();
        txtTUTAL = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        TXTPAY = new javax.swing.JTextField();
        txtpay = new javax.swing.JLabel();
        txtChange = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        btnlowStock = new javax.swing.JButton();
        btnEnterr = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        btnDELETE = new javax.swing.JButton();
        btnAddQuan = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(0, 0, 102));
        setUndecorated(true);
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(0, 0, 51));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        txtName.setEditable(false);
        txtName.setBackground(new java.awt.Color(0, 0, 0));
        txtName.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        txtName.setForeground(new java.awt.Color(255, 255, 255));
        jPanel1.add(txtName, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 380, 240, 60));

        txtCategory.setEditable(false);
        txtCategory.setBackground(new java.awt.Color(0, 0, 0));
        txtCategory.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        txtCategory.setForeground(new java.awt.Color(255, 255, 255));
        jPanel1.add(txtCategory, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 460, 240, 60));

        txtPrice.setEditable(false);
        txtPrice.setBackground(new java.awt.Color(0, 0, 0));
        txtPrice.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        txtPrice.setForeground(new java.awt.Color(255, 255, 255));
        jPanel1.add(txtPrice, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 540, 240, 60));

        txtQuanti.setBackground(new java.awt.Color(0, 0, 0));
        txtQuanti.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        txtQuanti.setForeground(new java.awt.Color(255, 255, 255));
        txtQuanti.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtQuantiActionPerformed(evt);
            }
        });
        jPanel1.add(txtQuanti, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 620, 240, 60));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Name");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 380, -1, -1));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Price");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 550, 100, -1));

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Quantity");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 630, -1, -1));

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Category");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 470, -1, -1));

        jTable1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jTable1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Quantity", "Price", "Category"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setRowHeight(30);
        jTable1.setSelectionBackground(new java.awt.Color(0, 0, 0));
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jTable1.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                jTable1ComponentShown(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setResizable(false);
            jTable1.getColumnModel().getColumn(1).setResizable(false);
            jTable1.getColumnModel().getColumn(2).setResizable(false);
            jTable1.getColumnModel().getColumn(3).setResizable(false);
        }

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 670, 370));

        tCart.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        tCart.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Quantity", "Price", "Total"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tCart.setRowHeight(30);
        tCart.setSelectionBackground(new java.awt.Color(0, 0, 0));
        jScrollPane2.setViewportView(tCart);

        jPanel1.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 0, 720, 370));

        btnBuy.setBackground(new java.awt.Color(0, 153, 0));
        btnBuy.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btnBuy.setText("Buy");
        btnBuy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuyActionPerformed(evt);
            }
        });
        jPanel1.add(btnBuy, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 390, -1, -1));

        txtTUTAL.setEditable(false);
        txtTUTAL.setBackground(new java.awt.Color(0, 0, 0));
        txtTUTAL.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        txtTUTAL.setForeground(new java.awt.Color(255, 255, 255));
        jPanel1.add(txtTUTAL, new org.netbeans.lib.awtextra.AbsoluteConstraints(1080, 390, 250, 60));

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Total");
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(980, 400, 90, 40));

        TXTPAY.setBackground(new java.awt.Color(0, 0, 0));
        TXTPAY.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        TXTPAY.setForeground(new java.awt.Color(255, 255, 255));
        TXTPAY.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TXTPAYActionPerformed(evt);
            }
        });
        jPanel1.add(TXTPAY, new org.netbeans.lib.awtextra.AbsoluteConstraints(1080, 480, 250, 60));

        txtpay.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        txtpay.setForeground(new java.awt.Color(255, 255, 255));
        txtpay.setText("Pay");
        jPanel1.add(txtpay, new org.netbeans.lib.awtextra.AbsoluteConstraints(1000, 480, -1, -1));

        txtChange.setEditable(false);
        txtChange.setBackground(new java.awt.Color(0, 0, 0));
        txtChange.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        txtChange.setForeground(new java.awt.Color(255, 255, 255));
        txtChange.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtChangeActionPerformed(evt);
            }
        });
        jPanel1.add(txtChange, new org.netbeans.lib.awtextra.AbsoluteConstraints(1080, 570, 250, 60));

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Change");
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(940, 580, -1, -1));

        btnlowStock.setBackground(new java.awt.Color(0, 153, 255));
        btnlowStock.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btnlowStock.setText("Search Low Stock");
        btnlowStock.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnlowStockActionPerformed(evt);
            }
        });
        jPanel1.add(btnlowStock, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 630, -1, -1));

        btnEnterr.setBackground(new java.awt.Color(0, 153, 0));
        btnEnterr.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btnEnterr.setText("Enter");
        btnEnterr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEnterrActionPerformed(evt);
            }
        });
        jPanel1.add(btnEnterr, new org.netbeans.lib.awtextra.AbsoluteConstraints(1080, 640, -1, -1));

        jButton1.setBackground(new java.awt.Color(255, 255, 0));
        jButton1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jButton1.setText("Refresh");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(1240, 640, -1, -1));

        btnDELETE.setBackground(new java.awt.Color(204, 0, 0));
        btnDELETE.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btnDELETE.setText("Delete");
        btnDELETE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDELETEActionPerformed(evt);
            }
        });
        jPanel1.add(btnDELETE, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 390, -1, -1));

        btnAddQuan.setBackground(new java.awt.Color(0, 153, 255));
        btnAddQuan.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btnAddQuan.setText("Add Quantity");
        btnAddQuan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddQuanActionPerformed(evt);
            }
        });
        jPanel1.add(btnAddQuan, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 580, -1, -1));

        jButton2.setBackground(new java.awt.Color(0, 153, 255));
        jButton2.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jButton2.setText("Add Product");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 520, -1, -1));

        jButton3.setBackground(new java.awt.Color(204, 0, 0));
        jButton3.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jButton3.setText("Exit");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(1450, 650, -1, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 698, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        // TODO add your handling code here:
        
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        try {
            Connection con = store.MyConnection.getConnection();
            Statement st = con.createStatement();
            ResultSet rs = st.executeQuery("Select * from inventory");
            while (rs.next()) {
                model.addRow(new Object[]{rs.getString("Name"), rs.getString("Quantity"), rs.getString("Price"), rs.getString("Category")});
                
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_formComponentShown

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:

        new Add().setVisible(true);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void btnAddQuanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddQuanActionPerformed
        // TODO add your handling code here:
        
        new AddQuantity().setVisible(true);
    }//GEN-LAST:event_btnAddQuanActionPerformed

    private void btnDELETEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDELETEActionPerformed
        // TODO add your handling code here:

        try (Connection con = MyConnection.getConnection()) {

            // Get the selected row index in the JTable
            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            int selectedRow = jTable1.getSelectedRow();

            // If no row is selected, show a message and return
            if (selectedRow == -1) {
                JOptionPane.showMessageDialog(null, "Please select a row to delete.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            String name = model.getValueAt(selectedRow, 0).toString();
            String quantity = model.getValueAt(selectedRow, 1).toString();

            // Get the values from the selected row (assuming the client_name and file_link are in columns 0 and 1)
            // SQL query to delete the row from the database based on client_name and file_link
            String sql = "DELETE FROM inventory WHERE name=? AND quantity=?";

            // Prepare the SQL statement
            try (PreparedStatement stmt = con.prepareStatement(sql)) {
                stmt.setString(1, name);
                stmt.setString(2, quantity);

                // Set client_name value
                // Set file_link value
                // Execute the update (deletion)
                int rowsAffected = stmt.executeUpdate();

                // If rows are affected, proceed to remove the row from the table
                if (rowsAffected > 0) {
                    // Remove the selected row from the table model
                    model.removeRow(selectedRow);

                    // Show success message
                    JOptionPane.showMessageDialog(null, "Row deleted successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    // If no rows were deleted from the database
                    JOptionPane.showMessageDialog(null, "Error deleting the row from the database.", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Database connection error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            
        }

    }//GEN-LAST:event_btnDELETEActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:

        setVisible(false);
        new Home().setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void btnEnterrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEnterrActionPerformed
        // TODO add your handling code here:

        calculateBalance();
    }//GEN-LAST:event_btnEnterrActionPerformed

    private void btnlowStockActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnlowStockActionPerformed
        // TODO add your handling code here:

        searchLowStock();
    }//GEN-LAST:event_btnlowStockActionPerformed

    private void txtChangeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtChangeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtChangeActionPerformed

    private void TXTPAYActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TXTPAYActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TXTPAYActionPerformed

    private void btnBuyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuyActionPerformed
        // TODO add your handling code here:

        String noOfUnits = txtQuanti.getText();
        if (!noOfUnits.equals("") && !noOfUnits.equals("0")) { // Also checking if quantity is greater than 0
            String productName = txtName.getText(); // Selected product
            String productCategory = txtCategory.getText(); // Product Category
            String productPrice = txtPrice.getText();

            // Make sure the productPrice and noOfUnits are valid numbers
            try {
                int totalPrice = Integer.parseInt(noOfUnits) * Integer.parseInt(productPrice);
                
                int checkStock = 0; // Initialize as no stock
                int checkProductAlreadyExistInCart = 0;
                
                try {
                    Connection con = store.MyConnection.getConnection();
                    Statement st = con.createStatement();

                    // Query using the 'store' table to get stock details
                    String query = "SELECT Name, Quantity, Category FROM Inventory WHERE Name = '" + productName + "'";
                    
                    ResultSet rs = st.executeQuery(query);
                    
                    while (rs.next()) {
                        if (rs.getInt("Quantity") >= Integer.parseInt(noOfUnits)) {  // Corrected field name (Quantity)
                            checkStock = 1; // Stock available
                            int remainingQuantity = rs.getInt("Quantity") - Integer.parseInt(noOfUnits);

                            // Update the stock in the store table
                            String updateQuery = "UPDATE Inventory SET Quantity = " + remainingQuantity
                                    + " WHERE Name = '" + productName + "'";
                            st.executeUpdate(updateQuery);
                            break;
                        } else {
                            JOptionPane.showMessageDialog(null, "Product is out of stock in the store. Only " + rs.getInt("Quantity") + " left.");
                        }
                    }
                    
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Error: " + e.getMessage());
                    return;
                }

                // Check if category is entered
                if (productCategory.isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Product category is required.");
                    return;
                }
                
                if (checkStock == 1) {
                    DefaultTableModel model = (DefaultTableModel) tCart.getModel(); // Using correct table name tCart

                    // Check if the product already exists in the cart
                    for (int i = 0; i < tCart.getRowCount(); i++) {
                        if (model.getValueAt(i, 0).toString().equals(productName)) {
                            checkProductAlreadyExistInCart = 1;
                            JOptionPane.showMessageDialog(null, "Product already exists in cart.");
                            break;
                        }
                    }
                    
                    if (checkProductAlreadyExistInCart == 0) {
                        // Add product to cart table
                        model.addRow(new Object[]{productName, noOfUnits, productPrice, productCategory, totalPrice});
                        finalTotalPrice += totalPrice;  // Ensure finalTotalPrice is declared and initialized
                        txtTUTAL.setText("₱" + finalTotalPrice); // Update the total price label
                        JOptionPane.showMessageDialog(null, "Product added to cart successfully.");
                    }
                    
                    clearProduct(); // Make sure to clear the fields after adding
                }
                
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Please enter valid numbers for quantity and price.");
            }
        } else {
            JOptionPane.showMessageDialog(null, "No quantity or product field is required.");
        }

    }//GEN-LAST:event_btnBuyActionPerformed

    private void jTable1ComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jTable1ComponentShown
        // TODO add your handling code here:

    }//GEN-LAST:event_jTable1ComponentShown

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        // TODO add your handling code here:

        int index = jTable1.getSelectedRow();
        TableModel model = jTable1.getModel();
        
        String name = model.getValueAt(index, 0).toString();
        txtName.setText(name);
        
        String category = model.getValueAt(index, 3).toString();
        txtCategory.setText(category);
        
        String price = model.getValueAt(index, 2).toString();
        txtPrice.setText(price);
    }//GEN-LAST:event_jTable1MouseClicked

    private void txtQuantiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtQuantiActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtQuantiActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        System.exit(0);
        
    }//GEN-LAST:event_jButton3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Home().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField TXTPAY;
    private javax.swing.JButton btnAddQuan;
    private javax.swing.JButton btnBuy;
    private javax.swing.JButton btnDELETE;
    private javax.swing.JButton btnEnterr;
    private javax.swing.JButton btnlowStock;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable tCart;
    private javax.swing.JTextField txtCategory;
    private javax.swing.JTextField txtChange;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtPrice;
    private javax.swing.JTextField txtQuanti;
    private javax.swing.JTextField txtTUTAL;
    private javax.swing.JLabel txtpay;
    // End of variables declaration//GEN-END:variables
}
